// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: shared/proto/advisor.proto

package advisorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdvisorService_GetAdvice_FullMethodName    = "/advisor.AdvisorService/GetAdvice"
	AdvisorService_StreamAdvice_FullMethodName = "/advisor.AdvisorService/StreamAdvice"
)

// AdvisorServiceClient is the client API for AdvisorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdvisorServiceClient interface {
	GetAdvice(ctx context.Context, in *AdvisorRequest, opts ...grpc.CallOption) (*AdvisorResponse, error)
	StreamAdvice(ctx context.Context, in *AdvisorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAdviceResponse], error)
}

type advisorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdvisorServiceClient(cc grpc.ClientConnInterface) AdvisorServiceClient {
	return &advisorServiceClient{cc}
}

func (c *advisorServiceClient) GetAdvice(ctx context.Context, in *AdvisorRequest, opts ...grpc.CallOption) (*AdvisorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdvisorResponse)
	err := c.cc.Invoke(ctx, AdvisorService_GetAdvice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advisorServiceClient) StreamAdvice(ctx context.Context, in *AdvisorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAdviceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AdvisorService_ServiceDesc.Streams[0], AdvisorService_StreamAdvice_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AdvisorRequest, StreamAdviceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdvisorService_StreamAdviceClient = grpc.ServerStreamingClient[StreamAdviceResponse]

// AdvisorServiceServer is the server API for AdvisorService service.
// All implementations must embed UnimplementedAdvisorServiceServer
// for forward compatibility.
type AdvisorServiceServer interface {
	GetAdvice(context.Context, *AdvisorRequest) (*AdvisorResponse, error)
	StreamAdvice(*AdvisorRequest, grpc.ServerStreamingServer[StreamAdviceResponse]) error
	mustEmbedUnimplementedAdvisorServiceServer()
}

// UnimplementedAdvisorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdvisorServiceServer struct{}

func (UnimplementedAdvisorServiceServer) GetAdvice(context.Context, *AdvisorRequest) (*AdvisorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdvice not implemented")
}
func (UnimplementedAdvisorServiceServer) StreamAdvice(*AdvisorRequest, grpc.ServerStreamingServer[StreamAdviceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAdvice not implemented")
}
func (UnimplementedAdvisorServiceServer) mustEmbedUnimplementedAdvisorServiceServer() {}
func (UnimplementedAdvisorServiceServer) testEmbeddedByValue()                        {}

// UnsafeAdvisorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdvisorServiceServer will
// result in compilation errors.
type UnsafeAdvisorServiceServer interface {
	mustEmbedUnimplementedAdvisorServiceServer()
}

func RegisterAdvisorServiceServer(s grpc.ServiceRegistrar, srv AdvisorServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdvisorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdvisorService_ServiceDesc, srv)
}

func _AdvisorService_GetAdvice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvisorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisorServiceServer).GetAdvice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvisorService_GetAdvice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisorServiceServer).GetAdvice(ctx, req.(*AdvisorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvisorService_StreamAdvice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AdvisorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdvisorServiceServer).StreamAdvice(m, &grpc.GenericServerStream[AdvisorRequest, StreamAdviceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AdvisorService_StreamAdviceServer = grpc.ServerStreamingServer[StreamAdviceResponse]

// AdvisorService_ServiceDesc is the grpc.ServiceDesc for AdvisorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdvisorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "advisor.AdvisorService",
	HandlerType: (*AdvisorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdvice",
			Handler:    _AdvisorService_GetAdvice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAdvice",
			Handler:       _AdvisorService_StreamAdvice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shared/proto/advisor.proto",
}
